// Script to display Firebase pricelist data
// Run this in the browser console or as a standalone script

async function showFirebasePricelistData() {
  try {
    // Check if Firebase is initialized
    if (typeof firebase === 'undefined') {
      console.error('‚ùå Firebase SDK not loaded');
      return;
    }

    if (!firebase.apps.length) {
      console.error('‚ùå Firebase not initialized');
      return;
    }

    console.log('üîÑ Connecting to Firebase...');
    const db = firebase.firestore();
    
    // Get products collection
    console.log('üìä Fetching products from Firebase...');
    const productsSnapshot = await db.collection('products').get();
    
    if (productsSnapshot.empty) {
      console.log('üì≠ No products found in Firebase database');
      return;
    }

    const products = [];
    productsSnapshot.forEach(doc => {
      products.push({
        id: doc.id,
        ...doc.data()
      });
    });

    console.log(`‚úÖ Found ${products.length} products in Firebase`);
    console.log('üìã Product Data:');
    console.table(products);

    // Group by categories
    const categories = {};
    products.forEach(product => {
      const category = product.Category || 'Unknown';
      if (!categories[category]) {
        categories[category] = [];
      }
      categories[category].push(product);
    });

    console.log('üìä Products by Category:');
    Object.keys(categories).forEach(category => {
      console.log(`\nüè∑Ô∏è  ${category} (${categories[category].length} products):`);
      categories[category].forEach(product => {
        console.log(`   ‚Ä¢ ${product.Product || 'Unknown Product'} - ${product.Rate || 'No Rate'} ${product.Currency || ''}`);
      });
    });

    // Group by price lists
    const priceLists = {};
    products.forEach(product => {
      const priceList = product.PriceList || product['Price List Name'] || 'Unknown';
      if (!priceLists[priceList]) {
        priceLists[priceList] = [];
      }
      priceLists[priceList].push(product);
    });

    console.log('\nüí∞ Products by Price List:');
    Object.keys(priceLists).forEach(priceList => {
      console.log(`\nüí≥ ${priceList} (${priceLists[priceList].length} products):`);
      priceLists[priceList].slice(0, 5).forEach(product => {
        console.log(`   ‚Ä¢ ${product.Product || 'Unknown Product'} - ${product.Rate || 'No Rate'} ${product.Currency || ''}`);
      });
      if (priceLists[priceList].length > 5) {
        console.log(`   ... and ${priceLists[priceList].length - 5} more`);
      }
    });

    return products;

  } catch (error) {
    console.error('‚ùå Error fetching Firebase data:', error);
    
    // Check for specific error types
    if (error.code === 'permission-denied') {
      console.log('üîí Permission denied. You may need to authenticate or check Firestore rules.');
    } else if (error.code === 'unavailable') {
      console.log('üåê Firebase service unavailable. Check your internet connection.');
    }
    
    return null;
  }
}

// Also check for any cached Firebase data
function showCachedFirebaseData() {
  console.log('\nüóÑÔ∏è  Checking for cached Firebase data...');
  
  const cachedData = localStorage.getItem('firebaseProductData');
  if (cachedData) {
    try {
      const data = JSON.parse(cachedData);
      console.log('‚úÖ Found cached Firebase data:');
      console.log(`üìÖ Loaded at: ${data.loadedAt}`);
      console.log(`üìä Products: ${data.products?.length || 0}`);
      console.log(`üë• Salesmen: ${data.salesmen?.length || 0}`);
      console.log(`üîó Source: ${data.source}`);
      
      if (data.products && data.products.length > 0) {
        console.log('\nüìã Sample cached products:');
        console.table(data.products.slice(0, 5));
      }
      
      return data;
    } catch (error) {
      console.error('‚ùå Error parsing cached data:', error);
    }
  } else {
    console.log('üì≠ No cached Firebase data found');
  }
  
  return null;
}

// Function to check Firebase connection status
function checkFirebaseStatus() {
  console.log('üîç Firebase Status Check:');
  console.log(`Firebase SDK loaded: ${typeof firebase !== 'undefined'}`);
  
  if (typeof firebase !== 'undefined') {
    console.log(`Firebase apps initialized: ${firebase.apps.length}`);
    
    if (firebase.apps.length > 0) {
      const app = firebase.apps[0];
      console.log(`Project ID: ${app.options.projectId}`);
      console.log(`Auth Domain: ${app.options.authDomain}`);
      
      // Check if user is authenticated
      if (firebase.auth && firebase.auth().currentUser) {
        console.log(`‚úÖ Authenticated as: ${firebase.auth().currentUser.email || 'Anonymous'}`);
      } else {
        console.log('üîì Not authenticated (may still work with public rules)');
      }
    }
  }
}

// Export functions for use
if (typeof window !== 'undefined') {
  window.showFirebasePricelistData = showFirebasePricelistData;
  window.showCachedFirebaseData = showCachedFirebaseData;
  window.checkFirebaseStatus = checkFirebaseStatus;
}

// Auto-run if this script is executed directly
if (typeof window !== 'undefined' && window.location) {
  console.log('üöÄ Firebase Data Viewer loaded');
  console.log('üìù Available functions:');
  console.log('   ‚Ä¢ showFirebasePricelistData() - Fetch live data from Firebase');
  console.log('   ‚Ä¢ showCachedFirebaseData() - Show cached data from localStorage');
  console.log('   ‚Ä¢ checkFirebaseStatus() - Check Firebase connection status');
  console.log('\nüí° Run any of these functions in the console to view data');
}

// If running in Node.js environment
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    showFirebasePricelistData,
    showCachedFirebaseData,
    checkFirebaseStatus
  };
}