COMPREHENSIVE PROMPT FOR HAIR PRODUCT PRICE LIST GENERATOR APPLICATION

========================================================================
PROJECT OVERVIEW
========================================================================

project-root/
├── index.html (main application file)
├── ProductDataJson280225.json (product database)
├── images/
│   ├── Products/ (product-specific images)
│   ├── logo.png
│   ├── *stamps.png (category stamps)
│   └── courier logos
├── .firebaserc (Firebase configuration)
├── firebase.json (hosting configuration)
└── .github/workflows/ (CI/CD pipelines)

Create a comprehensive hair product price list generator web application that allows users to create, customize, and export professional price lists for hair products. The application should be responsive, user-friendly, and capable of handling multiple currencies, product categories, and export formats.

========================================================================
DESIGN REQUIREMENTS
========================================================================

1. USER INTERFACE & EXPERIENCE
   - Modern, clean, and professional design
   - Mobile-first responsive design approach
   - Touch-friendly interface for mobile devices
   - Intuitive navigation and clear visual hierarchy
   - Consistent color scheme and typography
   - Loading states and user feedback mechanisms
   - Accessibility compliance (WCAG 2.1 AA)

2. VISUAL ASSETS
   - Company logo with proper sizing for different screen sizes
   - Product category images (weaves, DIY, closures, wigs, bulk, tapes, tips, clip-on, toppers)
   - Shipping carrier logos (DHL, FedEx, Aramex)
   - Product stamps and badges
   - Template backgrounds and decorative elements

3. RESPONSIVE DESIGN
   - Mobile: Single column layout, stacked elements
   - Tablet: Two-column layout with optimized spacing
   - Desktop: Multi-column layout with sidebar controls
   - Flexible grid system for product displays
   - Scalable typography and images
   - Touch-optimized buttons and controls

========================================================================
FUNCTIONAL SPECIFICATIONS
========================================================================

1. CORE FUNCTIONALITY
   - Dynamic price list generation based on user selections
   - Real-time preview of generated price lists
   - Multi-currency support with automatic conversion
   - Product filtering by category, density, and other attributes
   - Customizable price multipliers
   - Bulk operations for efficiency

2. CURRENCY SYSTEM
   - Support for multiple currencies (USD, EUR, GBP, INR, etc.)
   - Real-time currency conversion
   - Configurable exchange rates
   - Currency-specific formatting and symbols
   - Price rounding rules per currency

3. EXPORT & SHARING
   - PDF export with professional formatting
   - PNG image export for social media sharing
   - Email sharing functionality
   - Print-optimized layouts
   - Batch export capabilities
   - Custom filename generation

4. USER INTERACTION
   - Dropdown menus for product selection
   - Color-coded categories and products
   - Search and filter functionality
   - Drag-and-drop reordering
   - Keyboard shortcuts for power users
   - Undo/redo functionality

========================================================================
DATA REQUIREMENTS
========================================================================

1. PRODUCT DATA MODEL
   Required fields for each product:
   - Length: Product length specifications
   - PriceList: Base pricing information
   - Currency: Default currency for pricing
   - Category: Product category classification
   - Density: Hair density specifications
   - Product: Product name and type
   - Colors: Available color options
   - Standard Weight: Weight specifications
   - Rate: Pricing rate information
   - Can Be Sold in KG: Weight-based selling option
   - CategoryImage: Associated product images

2. IMAGE MAPPING
   - Product category images with consistent naming
   - High-resolution images for print quality
   - Optimized web formats for fast loading
   - Fallback images for missing assets
   - Image lazy loading implementation

3. CONFIGURATION DATA
   - Currency exchange rates
   - Price multiplier settings
   - Category color schemes
   - Default application settings
   - User preference storage

========================================================================
DEVELOPMENT PROCESS
========================================================================

1. PROJECT SETUP
   - Initialize HTML5 project structure
   - Set up Tailwind CSS for styling
   - Configure JavaScript libraries (jsPDF, html2canvas)
   - Implement responsive design framework
   - Set up version control and deployment

2. IMPLEMENTATION SEQUENCE
   Phase 1: Core Structure
   - HTML layout and semantic structure
   - CSS styling and responsive design
   - Basic JavaScript functionality
   - Data loading and parsing

   Phase 2: User Interface
   - Interactive controls and forms
   - Dynamic content generation
   - Real-time preview functionality
   - User feedback and validation

   Phase 3: Advanced Features
   - Export functionality (PDF/PNG)
   - Sharing capabilities
   - Performance optimization
   - Cross-browser compatibility

   Phase 4: Testing & Deployment
   - Unit testing and integration testing
   - User acceptance testing
   - Performance testing
   - Production deployment

3. TESTING REQUIREMENTS
   - Cross-browser compatibility testing
   - Mobile device testing
   - Performance and load testing
   - Accessibility testing
   - User experience testing

4. DEPLOYMENT CONSIDERATIONS
   - Static hosting compatibility
   - CDN integration for assets
   - Caching strategies
   - SEO optimization
   - Analytics integration

========================================================================
TECHNICAL SPECIFICATIONS
========================================================================

1. FRONTEND TECHNOLOGIES
   - HTML5 with semantic markup
   - CSS3 with Flexbox and Grid
   - Tailwind CSS for utility-first styling
   - Vanilla JavaScript for core functionality
   - Modern ES6+ features

2. LIBRARIES & DEPENDENCIES
   - jsPDF: PDF generation and export
   - html2canvas: HTML to image conversion
   - Font libraries for typography
   - Icon libraries for UI elements

3. PERFORMANCE REQUIREMENTS
   - Fast initial page load (<3 seconds)
   - Smooth animations and transitions
   - Efficient memory usage
   - Optimized image loading
   - Minimal JavaScript bundle size

4. BROWSER SUPPORT
   - Modern browsers (Chrome, Firefox, Safari, Edge)
   - Mobile browsers (iOS Safari, Chrome Mobile)
   - Progressive enhancement approach
   - Graceful degradation for older browsers

========================================================================
DATA ASSET INVENTORY
========================================================================

1. PRODUCT IMAGES
   - BUN.png, Bangs.png, Bulk.png
   - ClipOn.png, Closure.png, ClutchBun.png
   - CoverPatch.png, CurlyBun.png
   - FLATCLIPPONYTAIL.png, FlatTips.png
   - Frontal.png, Frontline.png, Genius.png
   - Halo.png, Highlights.png, ITIPS.png
   - Nano.png, PonyTail.png, SILKTOPPER.png
   - Tapes.png, UTIPS.png, WIGCLOSURE.png
   - WIGFRONTAL.png, Weaves-DD.png
   - Weaves-SD.png, Weaves-SDD.png, YTIPS.png

2. BRANDING ASSETS
   - logo.png: Main company logo
   - madewithbadge.png: Attribution badge
   - template.png: Background template

3. SHIPPING LOGOS
   - aramex-logo-official.svg, aramex-logo.svg
   - dhl-logo-official.svg, dhl-logo.svg
   - fedex-logo-official.svg, fedex-logo.svg

4. PRODUCT STAMPS
   - generalstamps.png, geniusstamps.png
   - lacestamps.png, tapesstamps.png
   - tipsstamps.png

5. DATA FILES
   - ProductDataJson280225.json: Complete product database
   - Embedded JSON data within HTML

========================================================================
USER STORIES & ACCEPTANCE CRITERIA
========================================================================

1. As a business owner, I want to generate professional price lists quickly
   - Select products from comprehensive database
   - Apply custom pricing and multipliers
   - Generate preview in real-time
   - Export in multiple formats

2. As a mobile user, I want the app to work seamlessly on my device
   - Touch-friendly interface
   - Responsive design
   - Fast loading times
   - Offline capability (future enhancement)

3. As an international seller, I want multi-currency support
   - Select from multiple currencies
   - Automatic price conversion
   - Currency-specific formatting
   - Real-time exchange rates

4. As a user, I want to share price lists easily
   - Export as PDF for professional use
   - Export as PNG for social media
   - Email sharing functionality
   - Print-optimized layouts

========================================================================
FUTURE ENHANCEMENTS
========================================================================

1. Advanced Features
   - User accounts and saved preferences
   - Template customization
   - Bulk import/export functionality
   - API integration for real-time pricing
   - Multi-language support

2. Business Features
   - Customer management
   - Order tracking integration
   - Inventory management
   - Analytics and reporting
   - White-label solutions

3. Technical Improvements
   - Progressive Web App (PWA) capabilities
   - Offline functionality
   - Real-time collaboration
   - Cloud synchronization
   - Advanced caching strategies

========================================================================
CONCLUSION
========================================================================

This comprehensive prompt provides a complete roadmap for building a professional hair product price list generator application. Follow the structured approach, implement features progressively, and maintain focus on user experience and performance throughout the development process.

The application should serve as a powerful tool for hair product businesses to create professional, customizable price lists that can be easily shared and exported in multiple formats while maintaining a responsive, user-friendly interface across all devices.